#include <vector>

class Solution {
public:
    int first_occ(const std::vector<int>& nums, int target) {
        int n = nums.size();
        int s = 0;
        int e = n - 1;
        int ans1 = -1;
        
        while (s <= e) {
            int mid = s + (e - s) / 2;
            if (nums[mid] == target) {
                ans1 = mid;
                e = mid - 1;
            } else if (nums[mid] > target) {
                e = mid - 1;
            } else {
                s = mid + 1;
            }
        }
        
        return ans1;
    }

    int last_occ(const std::vector<int>& nums, int target) {
        int n = nums.size();
        int s = 0;
        int e = n - 1;
        int ans1 = -1;
        
        while (s <= e) {
            int mid = s + (e - s) / 2;
            if (nums[mid] == target) {
                ans1 = mid;
                s = mid + 1;
            } else if (nums[mid] > target) {
                e = mid - 1;
            } else {
                s = mid + 1;
            }
        }
        
        return ans1;
    }

    std::vector<int> searchRange(std::vector<int>& nums, int target) {
        int a = first_occ(nums, target);
        int b = last_occ(nums, target);

        return {a, b};
    }
};
//Logic for "Find First and Last Position of Element in Sorted Array":

1. Use two binary search functions:
   - first_occ: Finds the first occurrence of target
   - last_occ: Finds the last occurrence of target

2. Binary search implementation:
   - Initialize start (s) and end (e) pointers
   - While s <= e:
     - Calculate mid = s + (e - s) / 2
     - If nums[mid] == target:
       - Update ans1 (potential result)
       - For first_occ: Move e left (e = mid - 1)
       - For last_occ: Move s right (s = mid + 1)
     - If nums[mid] > target: Move e left
     - If nums[mid] < target: Move s right

3. searchRange function:
   - Call first_occ and last_occ
   - Return results as a vector {first, last}

Time complexity: O(log n)
Space complexity: O(1)
